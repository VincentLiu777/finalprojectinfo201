covidData
shiny::runApp()
runApp()
covidData <- read.csv("../raw data/owid-covid-data (1).csv")
data <- covidData %>%
filter(continent == "" | location =="United States" | location == "China" |
location == "Russia" | location == "Japan" | location == "Germany" |
location == "Brazil" | location == "United Arab Emirates" |
location == "United Kingdom") %>%
select(location, date, total_cases, new_cases, total_deaths, new_deaths, people_fully_vaccinated) %>%
mutate(month = format(as.POSIXlt(date), "%m/%Y")) %>%
group_by(location, month) %>%
summarise(total_cases = max(total_cases),
new_cases = max(new_cases),
total_deaths = max(total_deaths),
new_deaths = max(new_deaths),
people_fully_vaccinated = max(people_fully_vaccinated))
View(data)
runApp()
runApp()
runApp('D:/Git/home/finalprojectinfo201/Finalproject_BaseCodeTemplate')
install.packages("hrbrthemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
detach("package:hrbrthemes", unload = TRUE)
library(hrbrthemes)
library(hrbrthemes)
hrbrthemes::import_roboto_condensed()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('D:/Git/home/finalprojectinfo201/Finalproject_BaseCodeTemplate')
runApp('D:/Git/home/finalprojectinfo201/FinalProject')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("scales")
shiny::runApp()
runApp()
runApp()
detach("package:hrbrthemes", unload = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
vac <- reactive({ ## data for vaccine.
print(input$slider)
data %>%
filter(month == format(as.POSIXlt(input$slider), "%m/%Y")) %>%
filter(location %in% input$location) %>%
select(location, people_fully_vaccinated)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
runApp()
runApp()
runApp()
runApp('D:/Git/home/finalprojectinfo201/Finalproject_BaseCodeTemplate')
runApp('D:/Git/home/finalprojectinfo201/FinalProject')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ploty.json(p)
runApp()
runApp()
runApp()
runApp()
ploty.json(p)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shiny.router")
library(shiny.router)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp('FinalProject')
runApp()
runApp()
runApp()
runApp()
library(shiny.router)
runApp()
runApp()
runApp()
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
#theme = "main.css",
# Application title
titlePanel("Covid-19 data visualization and analysis"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("slider", "Time", min = as.Date("2020-01-01"),max =as.Date("2021-05-01"),value=as.Date("2020-01-01"),timeFormat="%m/%Y"),
uiOutput("locations"),
actionLink("selectall","Select All")
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Home",
img(src='Coronavirus-CDC-645x645.jpg', align = "left"),
p("Welcome to our website. This website is a student assignment for Info 201 in
University of Washington. The website contains information about Covid-19
in general, all data was collected from âOur World in Dataâ.The dataset
explicitly contains cumulative data and daily data for vaccine numbers,
confirmed cases, confirmed deaths, newly increased cases, etc.
This vaccination dataset uses the most recent official numbers from governments
and health ministries worldwide. All data comes from Global Change Data Lab,
on their website, it offers detailed information on editors and data collectors.","Here is the link for reference: ",a(href="https://ourworldindata.org/covid-vaccinations", "[Coronavirus (COVID-19)
Vaccinations - Statistics and Research - Our World in Data.]")),
br(),
p("For our groupâs project, the intended audience could be simply anyone who cares and
willing to pay attention to the pandemic data. The audience can have a better
understanding of the pandemic and its influence to various factors after reading our
groupâs report. In the website, we will offer three graphs that correspond with the
opions on the left. Users have the ability to see a single country or continent, and
also compare various countries or continents. Users also have the ability to drag the
timeline to see the shift on data. The three graphs are: the number of cases,
the mortality rate, and the vaccination.",a(href="https://github.com/VincentLiu777/finalprojectinfo201", "You can learn more about the coding through
our groupâs github repository.")),
br(),
p("Graph of Cases of Infection: The first dot on the graph represents the number of
new cases in that region, where the second dot on the graph represents the total
cases of the region.
Graph of mortality rate: This graph computes the mortality rate for the specific
region, the unit for this graph is in percent.
Graph of vaccine: This graph shows the number of people that are fully vaccinated
in the specific region. SInce the vaccine finally came out in around January 2021,
please drag the timeline to the proper time period in order to examine the data.")),
tabPanel("About Us",
p("About the Author: The website was written by three students from University of Washington."),
p("Anthony Zhang: A pre-major freshman at UW."),
p("Vincent Liu: A pre-major freshman at UW."),
p("Minhui He: A senior major in Math at UW. "),
p("You can contact us by email: rliu8@uw.edu.")),
tabPanel("Numbers of Cases",
plotlyOutput("cases_Plot")),
tabPanel("Mortality Rate",
plotlyOutput("Mortality_Plot")),
tabPanel("Vaccine",
plotlyOutput("vac_Plot")),
tabPanel("Conclusion",
p("Considering the confirm cases of COVID-19 worldwide, the total number of cases
increases rapidly initially and is then controlled regionally by countries. From
the plot, the monthly new cases of COVID-19 worldwide was stable at the point around
500,000. However, the situation start to get worse around 01/2021. Hypothetically,
this increment could caused by the aberrance of COVID-19."),
p("In the case of mortality rate, the world's mortality rate of COVID-19 reaches maximum at 08/2021.
Areas with large number of confirmed cases of COVID(South America and Oceania) has raised the
worldwide mortality rate significantly. Lately, around 03/2021, the worldwide mortality rate of
COVID-19 start to stablize around 1.8. "))
runApp()
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp()
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp()
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp('D:/Git/home/finalprojectinfo201/FinalProjectSingle_file')
runApp()
runApp()
runApp()
setwd("D:/Git/home/finalprojectinfo201/FinalProject")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
covidData <- read.csv("owid-covid-data (1).csv")
runApp()
runApp()
runApp()
runApp()
